


taking(thing_0, thing_1, place_0):

datetime_0 is datetime:
datetime_0 < datetime_1:

datetime_set_1 is set datetime:
datetime_set_1 < datetime_2:

datetime_2 is datetime:
datetime_2 < datetime_3:

thing_1:
  not possessing(thing_0):
  datetime: datetime_0

thing_1:
  acting: set acting 
  datetime: datetime_set_1

thing_1:
  possessing(thing_0):
  datetime: datetime_2


### playground ###
# equal

evaluate(logical-statement, t-conclusion, f-conclusion): = if

difference(data_0, data_1):
  if(data_0 = data_1) <- null
  if(data_0 = null) <- 'created'
  if(data_1 = null) <- 'created'
  
  <- 'updated'

difference(concept_0, concept_1):
  difference
  for(id_0 in concept_0):
    data_0 <- concept_0[id_0]
    data_1 <- concept_1[id_0]

    if(data_0 is concept || data_1 is concept):
      difference part [id_0] <-
        type: difference(data_0, data_1)
        data: data_1
    else:
      difference part [id_0] <- difference(data_0, data_1)
  
  for(id_0 in concept_1):
    if (difference part [id_0] != null): continue

    difference part [id_0] <-
      type: difference(null, concept_1 part [id_0])
      data: data_1

  <- difference

equal:
  compound:
    identifier: equal, same

different:
  compound:
    identifier: different

for each data that is descendant of concept_1, there

equal(data_0, data_1):

equal(concept_0, concept_1):
  for(data_0 in concept_0,
      data_1 in concept_1):
    if(data_0 is concept xor data_1 is concept):
      different:
    if(data_0 is concept & data_1 is concept):
      so:
        equal(data_0, data_1):
    if(data_0 is !concept & data_1 is !concept):
      if(data_0 != data_1):
        different:
  equal:

change(
  concept_0:
    datetime:
      datetime_0,
  concept_1:
    datetime:
      datetime_1 > datetime_0
  ):
    <- difference(concept_0, concept_1)

pattern:
  part:
    change_1:
      
    physical-object_1:
      datetime: datetime_0
    physical-object_2:
      datetime: datetime_1 > datetime_0

evaluate(data_0, logic-rules):

# [to generate]


# [to theorize]
theorize(logical-statement):
  generate(logical-statement):
 
# [to relate]
relate(data_0, data_1):
  for(index_x, change_x in set_1(change, number_1)):
    evaluate(...):
      logical-statement:
        data_0 change_x => data_1 change_y:
      t-conclusion:
        data_0 re_x data_1:

# [to attach] to include something physical


